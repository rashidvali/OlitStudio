  
  
Yes, you can reference another TypeScript project from a Webpack-based TypeScript project. The recommended approach is to use **TypeScript Project References** combined with proper Webpack configuration for bundling. Here's a detailed guide.
## 1. TypeScript Project References  
  
TypeScript supports **Project References** to enable modular development and faster incremental builds. Suppose you have two projects:
```
/projects
/lib      (TypeScript library project)
/app      (Webpack TypeScript app project)
```
### Step 1: Configure `tsconfig.json` for the library  
  
```json
// /projects/lib/tsconfig.json
{
"compilerOptions": {
"composite": true,          // needed for project references
"declaration": true,
"outDir": "./dist",
"rootDir": "./src",
"module": "ESNext",
"target": "ES6"
},
"include": ["src"]
}
```
### Step 2: Configure `tsconfig.json` for the app  
  
```json
// /projects/app/tsconfig.json
{
"compilerOptions": {
"outDir": "./dist",
"module": "ESNext",
"target": "ES6"
},
"references": [
{ "path": "../lib" }
],
"include": ["src"]
}
```
- `"references"` points to the library project.  
- Both projects must have `"composite": true` in library for project references to work.  
  
### Step 3: Build the library first  
  
```bash
cd projects/lib
tsc --build
```
Then build the app:
```bash
cd projects/app
tsc --build
```
## 2. Webpack Configuration  
  
In your Webpack project (`/projects/app`), you can import the library like any other module. Install **ts-loader**:
```bash
npm install --save-dev ts-loader typescript
```
```javascript
// webpack.config.js
const path = require('path');
module.exports = {
entry: './src/index.ts',
module: {
rules: [
{
test: /\\.ts$/,
use: 'ts-loader',
exclude: /node_modules/,
options: {
projectReferences: true  // enables project references
}
}
]
},
resolve: {
extensions: ['.ts', '.js']
},
output: {
filename: 'bundle.js',
path: path.resolve(__dirname, 'dist')
}
};
```
### 3. Importing the Library in Code  
  
```typescript
// /projects/app/src/index.ts
import { greet } from 'lib/dist';  // or relative path to lib's output
console.log(greet('World'));
```
## 4. Notes and Best Practices  
  
- Make sure the library is **built before running Webpack** for the app, or enable incremental builds with `tsc --build --watch`.  
- Use **type declarations** from the library to benefit from TypeScript's type checking.  
- For local development, you can also use **npm/yarn workspaces** or `npm link` to simplify module resolution.  
  
## Summary  
  
Yes, Webpack TypeScript projects can reference other TypeScript projects using **TypeScript Project References**. The process involves:  
1. Setting up `tsconfig.json` with `"composite": true` for the library.    
2. Adding `"references"` in your app project.    
3. Configuring `ts-loader` in Webpack with `projectReferences: true`.    
4. Ensuring the library is built before building/bundling the app.    
  
This setup allows clean, modular TypeScript projects with full type safety and optimized builds.


Source(s):  
[^1^]: https://stackoverflow.com/questions/76297490/typescript-and-next-js-include-another-projects-source-code-only-from-outside  
[^2^]: https://www.typescriptlang.org/docs/handbook/project-references.html  
[^3^]: https://webpack.js.org/guides/typescript/  
[^4^]: https://github.com/TypeStrong/ts-loader/blob/main/REFERENCES.md

---------------------------------------------------------------------------------------------------------------------------

  
  
Yes, you can reference another TypeScript project from a Webpack TypeScript project. There are a few common approaches depending on your setup:
---
## 1. Using TypeScript Project References  
  
TypeScript supports project references natively via `tsconfig.json`:
1. **Structure Example:**  
  
```
root/
├─ project-a/
│  ├─ tsconfig.json
│  └─ src/
│      └─ index.ts
├─ project-b/
│  ├─ tsconfig.json
│  └─ src/
│      └─ main.ts
```
2. **Configuring `project-a` (`tsconfig.json`):**  
  
```json
{
"compilerOptions": {
"composite": true,   // Required for referenced projects
"outDir": "dist",
"rootDir": "src"
}
}
```
3. **Configuring `project-b` to reference `project-a`:**  
  
```json
{
"compilerOptions": {
"outDir": "dist",
"rootDir": "src"
},
"references": [
{
"path": "../project-a"
}
]
}
```
4. **Build order:**  
  
```bash
# In the root directory  
tsc --build project-a
tsc --build project-b
```
Webpack can then bundle the compiled output from `project-a`, or you can set up TypeScript loaders to compile on the fly.
---
## 2. Using NPM/Yarn Local Packages  
  
If the other project is npm-compatible, you can treat it as a local package:
1. **In `project-a`, add `package.json`:**  
  
```json
{
"name": "project-a",
"version": "1.0.0",
"main": "dist/index.js",
"types": "dist/index.d.ts"
}
```
2. **In `project-b`, install locally:**  
  
```bash
# From project-b root  
npm install ../project-a
```
3. **Import in TypeScript:**  
  
```ts
import { SomeFunction } from 'project-a';
SomeFunction();
```
Webpack will resolve this as a normal module.
---
## 3. Direct Import with Path Mapping  
  
Another method is using `paths` in `tsconfig.json`:
```json
{
"compilerOptions": {
"baseUrl": ".",
"paths": {
"@project-a/*": ["../project-a/src/*"]
}
}
}
```
Then:
```ts
import { SomeFunction } from '@project-a/module';
```
Webpack with `ts-loader` or `babel-loader` will properly resolve paths as long as path mapping is set in the loader config.
---
## Best Practices  
  
- **Use project references if projects are interdependent**: allows incremental builds.  
- **Use local NPM packages for loosely coupled code**: cleaner dependency management.  
- **Keep TypeScript `composite` enabled** for any projects being referenced directly.  
- **Configure Webpack `resolve.alias`** if using path mapping.  
  
---
## Example Webpack ts-loader Configuration  
  
```js
// webpack.config.js
const path = require('path');
module.exports = {
entry: './src/main.ts',
resolve: {
extensions: ['.ts', '.js'],
alias: {
'@project-a': path.resolve(__dirname, '../project-a/src')
}
},
module: {
rules: [
{
test: /\\.ts$/,
loader: 'ts-loader',
options: { 
transpileOnly: false,
configFile: 'tsconfig.json'
}
}
]
},
output: {
filename: 'bundle.js',
path: path.resolve(__dirname, 'dist')
}
};
```
This ensures that TypeScript and Webpack can resolve cross-project imports correctly. 
---
**Summary:**  
You can reference another TypeScript project via **project references**, **local npm packages**, or **path mappings**, and Webpack can be configured to handle these resolutions seamlessly. Which method to use depends on your project coupling and build workflow.


Source(s):  
[^1^]: https://stackoverflow.com/questions/76297490/typescript-and-next-js-include-another-projects-source-code-only-from-outside  
[^2^]: https://www.typescriptlang.org/docs/handbook/project-references.html  
[^3^]: https://github.com/TypeStrong/ts-loader/blob/main/REFERENCES.md  
[^4^]: https://webpack.js.org/guides/typescript/