{
  "scopeName": "embedded.olit.injection",
  "injectionSelector": "source.ts string.template.ts meta.var.expr.ts",
  "patterns": [
    {
      "name": "meta.embedded.block.olitdom",
      "begin": "(d)\\s*`",
      "end": "`",
      "beginCaptures": {
        "1": { "name": "entity.name.function.tagged-template.ts" },
        "0": { "name": "punctuation.definition.template.begin.ts" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.definition.template.end.ts" }
      },
      "contentName": "text.olitdom",
      "patterns": [
        { "include": "#olitdom-content" }
      ]
    },
    {
      "name": "meta.embedded.block.olitql",
      "begin": "(q)\\s*`",
      "end": "`",
      "beginCaptures": {
        "1": { "name": "entity.name.function.tagged-template.ts" },
        "0": { "name": "punctuation.definition.template.begin.ts" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.definition.template.end.ts" }
      },
      "contentName": "text.olitql",
      "patterns": [
        { "include": "#olitql-content" }
      ]
    },
    {
      "name": "meta.embedded.block.olit",
      "begin": "(n)\\s*`",
      "end": "`",
      "beginCaptures": {
        "1": { "name": "entity.name.function.tagged-template.ts" },
        "0": { "name": "punctuation.definition.template.begin.ts" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.definition.template.end.ts" }
      },
      "contentName": "text.olit",
      "patterns": [
        { "include": "#base-olit-content" }
      ]
    }
  ],
  "repository": {
    "olitdom-content": {
      "patterns": [
        { "include": "#typescript-objects" },
        { "include": "#olitdom-strings" },
        { "include": "#base-olit-content" }
      ]
    },
    "olitdom-strings": {
      "patterns": [
        {
          "name": "meta.key-value.olitdom",
          "match": "^\\s*([^:\\n\\r]+)(\\s*:\\s*)([^\\n;]+)",
          "captures": {
            "1": { "name": "variable.other.property" },
            "2": { "name": "punctuation.separator.key-value" },
            "3": { 
              "patterns": [
                {
                  "name": "string.quoted.double.olitdom",
                  "match": "\"([^\"]*)\""
                },
                {
                  "name": "string.unquoted.olitdom", 
                  "match": "[^\\n;]+"
                }
              ]
            }
          }
        },
        {
          "name": "string.quoted.double.olitdom",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "string.quoted.double.content.olitdom",
              "match": "[^\"]*"
            }
          ]
        }
      ]
    },
    "typescript-objects": {
      "patterns": [
        {
          "name": "entity.name.type.class",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b(?=\\s*[:{])"
        },
        {
          "name": "entity.name.type.interface",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b(?=\\s*\\.)"
        },
        {
          "name": "variable.other.object",
          "match": "\\b[a-z][a-zA-Z0-9_]*\\b(?=\\s*[.:])"
        },
        {
          "name": "entity.name.type.enum",
          "match": "\\b[A-Z][A-Z0-9_]*\\b"
        },
        {
          "name": "variable.other.property",
          "match": "(?<=\\.)\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "olitql-content": {
      "patterns": [
        { "include": "#base-olit-content" },
        { "include": "#olitql-specific" }
      ]
    },
    "olitql-specific": {
      "patterns": [
        {
          "name": "meta.olitql.rhs.placeholder.simple",
          "match": "^\\s*([^:\\n\\r]+)(\\s*:\\s*)(\\b_\\b)(\\s*)(\\b(?:LIKE|IN|=|!=|<>|<=|>=|<|>)\\b)(\\s*)((?:\"[^\"']*\")|(?:[^\\n;]+))",
          "captures": {
            "1": { "name": "variable.other.property" },
            "2": { "name": "punctuation.separator.key-value" },
            "3": { "name": "variable.language.olitql" },
            "5": { "name": "keyword.operator" },
            "7": { "name": "string" }
          }
        },
        {
          "name": "meta.olitql.rhs.placeholder",
          "match": "^\\s*([^:\\n\\r]+)(\\s*:\\s*)(\\b_\\b)(\\s*)(\\b(LIKE|IN|=|!=|<>|<=|>=|<|>)\\b)(\\s*)([^\\n;]+)",
          "captures": {
            "1": { "name": "variable.other.property" },
            "2": { "name": "punctuation.separator.key-value" },
            "3": { "name": "variable.language.olitql" },
            "5": { "name": "keyword.operator" },
            "8": { "name": "string" }
          }
        },
        {
          "name": "keyword.operator",
          "match": "\\b(LIKE|IN|BETWEEN|IS|NULL)\\b"
        }
      ]
    },
    "base-olit-content": {
      "patterns": [
        {
          "name": "meta.key-only",
          "match": "^\\s*([^:\\n\\r]+)(:)\\s*$",
          "captures": {
            "1": { "name": "variable.other.property" },
            "2": { "name": "punctuation.separator.key-value" }
          }
        },
        {
          "name": "meta.key-value.force",
          "match": "^\\s*([^:\\n\\r]+)(\\s*:\\s*)([^\\n;]+)",
          "captures": {
            "1": { "name": "variable.other.property" },
            "2": { "name": "punctuation.separator.key-value" },
            "3": { "name": "string" }
          }
        },
        {
          "name": "comment.line",
          "match": "#.*$"
        },
        {
          "name": "variable.language.olitql",
          "match": "\\b_\\b"
        },
        {
            "name": "meta.key-value.single-line",
            "match": "^\\s*([^:\\n\\r]+)(\\s*:\\s*)(?:(\"[^\"]*\")|(\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d{3})?)?(?:Z|[+\\-]\\d{2}:\\d{2})?)?)|(\\d{4}-\\d{2}-\\d{2} \\\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d{3})?)?)|([+-]?\\d+(?:\\.\\d+)?)|(\\b_\\b)|(true|false)\\b|([^\\n;]+)))",
            "captures": {
              "1": { "name": "variable.other.property" },
              "2": { "name": "punctuation.separator.key-value" },
              "3": { "name": "string.quoted.double" },
              "4": { "name": "constant.other.date" },
              "5": { "name": "constant.other.date" },
              "6": { "name": "constant.numeric" },
              "7": { "name": "variable.language.olitql" },
              "8": { "name": "constant.language.boolean" },
              "9": { "name": "string" }
            }
          },
        {
          "name": "punctuation.separator.key-value",
          "match": ":"
        },
        {
          "name": "punctuation.terminator",
          "match": ";"
        },
        {
          "name": "string.quoted.double",
          "begin": "\"",
          "end": "\"",
          "beginCaptures": { "0": { "name": "keyword.operator" } },
          "endCaptures": { "0": { "name": "keyword.operator" } },
          "patterns": [
            { "name": "string.quoted.double", "match": "[\\s\\S]+?" }
          ]
        },
        {
          "name": "string",
          "match": "(?<=:\\s)([^\\n;\\r]+)"
        },
        {
          "name": "variable.other.property",
          "match": "^\\s*[^:\\n\\r]+(?=:)",
          "captures": {
            "0": { "name": "variable.other.property" }
          }
        },
        {
          "name": "string",
          "begin": "(?<=:\\n)\\t+",
          "end": "(?=^\\s*[^\\t]|$)",
          "patterns": [
            { "name": "string", "match": "[\\s\\S]+?" }
          ]
        },
        {
          "name": "keyword.operator",
          "match": "\\b(AND|OR|IN|NOT|=|!=|<>|<=|>=|<|>)\\b"
        },
        {
          "name": "constant.numeric",
          "match": "\\b\\d+(?:\\.\\d+)?\\b"
        },
        {
          "name": "constant.language.boolean",
          "match": "(?<=:\\s*)(?:true|false)\\b"
        },
        {
          "name": "punctuation.definition.symbol",
          "match": "[#\\-+]"
        }
      ]
    }
  }
}